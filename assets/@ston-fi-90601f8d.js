import{Address as M,address as W,beginCell as r,toNano as a}from"@ton/ton";const u={v1:"v1",v2_1:"v2_1",v2_2:"v2_2"},j={CPI:"constant_product"};function d(i){return i instanceof M?i:W(i.toString())}class f{constructor(t,e){this.address=d(t)}static create(t){return new this(t)}}class l extends f{async getWalletAddress(t,e){return(await t.get("get_wallet_address",[{type:"slice",cell:r().storeAddress(d(e)).endCell()}])).stack.readAddress()}async getJettonData(t){const e=await t.get("get_jetton_data",[]);return{totalSupply:e.stack.readBigNumber(),canIncSupply:!!e.stack.readNumber(),adminAddress:e.stack.readAddressOpt(),contentRaw:e.stack.readCell(),jettonWalletCode:e.stack.readCell()}}}function v(i){const t=r();return t.storeUint(260734629,32),t.storeUint(i.queryId,64),t.storeCoins(BigInt(i.amount)),t.storeAddress(d(i.destination)),t.storeAddress(i.responseDestination?d(i.responseDestination):void 0),i.customPayload?(t.storeBit(!0),t.storeRef(i.customPayload)):t.storeBit(!1),t.storeCoins(BigInt(i.forwardTonAmount)),i.forwardPayload?(t.storeBit(!0),t.storeRef(i.forwardPayload)):t.storeBit(!1),t.endCell()}class C extends Error{constructor({expected:t,received:e}){super(`The version of the provided pTON (${e}) does not match the expected version (${t})`)}}const T={SWAP:630424929,PROVIDE_LP:4244235663,DIRECT_ADD_LIQUIDITY:1291331587,REFUND_ME:200537159,RESET_GAS:1117846339,COLLECT_FEES:533429565,BURN:1499400124},Y="EQB3ncyBUTjZUA5EnFKR5_EnOMI9V1tTEAAPaiU71gc4TiUt";class X extends f{async getBalance(t){if((await t.getState()).state.type!=="active")return BigInt(0);const{balance:s}=await this.getWalletData(t);return s}async getWalletData(t){const e=await t.get("get_wallet_data",[]);return{balance:e.stack.readBigNumber(),ownerAddress:e.stack.readAddress(),jettonMasterAddress:e.stack.readAddress(),jettonWalletCode:e.stack.readCell()}}}const m=class Q extends f{constructor(t,{gasConstants:e,...s}={}){super(t,s),this.gasConstants={...Q.gasConstants,...e}}async createRefundBody(t){return r().storeUint(T.REFUND_ME,32).storeUint((t==null?void 0:t.queryId)??0,64).endCell()}async getRefundTxParams(t,e){const s=this.address,o=await this.createRefundBody({queryId:e==null?void 0:e.queryId}),n=BigInt((e==null?void 0:e.gasAmount)??this.gasConstants.refund);return{to:s,value:n,body:o}}async sendRefund(t,e,s){const o=await this.getRefundTxParams(t,s);return e.send(o)}async createDirectAddLiquidityBody(t){return r().storeUint(T.DIRECT_ADD_LIQUIDITY,32).storeUint((t==null?void 0:t.queryId)??0,64).storeCoins(BigInt(t.amount0)).storeCoins(BigInt(t.amount1)).storeCoins(BigInt(t.minimumLpToMint??1)).endCell()}async getDirectAddLiquidityTxParams(t,e){const s=this.address,o=await this.createDirectAddLiquidityBody({amount0:e.amount0,amount1:e.amount1,minimumLpToMint:e.minimumLpToMint,queryId:e.queryId}),n=BigInt(e.gasAmount??this.gasConstants.directAddLp);return{to:s,value:n,body:o}}async sendDirectAddLiquidity(t,e,s){const o=await this.getDirectAddLiquidityTxParams(t,s);return e.send(o)}async createResetGasBody(t){return r().storeUint(T.RESET_GAS,32).storeUint((t==null?void 0:t.queryId)??0,64).endCell()}async getResetGasTxParams(t,e){const s=this.address,o=await this.createResetGasBody({queryId:e==null?void 0:e.queryId}),n=BigInt((e==null?void 0:e.gasAmount)??this.gasConstants.resetGas);return{to:s,value:n,body:o}}async sendResetGas(t,e,s){const o=await this.getResetGasTxParams(t,s);return e.send(o)}async getLpAccountData(t){const e=await t.get("get_lp_account_data",[]);return{userAddress:e.stack.readAddress(),poolAddress:e.stack.readAddress(),amount0:e.stack.readBigNumber(),amount1:e.stack.readBigNumber()}}};m.version=u.v1;m.gasConstants={refund:a("0.3"),directAddLp:a("0.3"),resetGas:a("0.3")};let $=m;const q=class H extends l{constructor(t,{gasConstants:e,...s}={}){super(t,s),this.gasConstants={...H.gasConstants,...e}}async createCollectFeesBody(t){return r().storeUint(T.COLLECT_FEES,32).storeUint((t==null?void 0:t.queryId)??0,64).endCell()}async getCollectFeeTxParams(t,e){const s=this.address,o=await this.createCollectFeesBody({queryId:e==null?void 0:e.queryId}),n=BigInt((e==null?void 0:e.gasAmount)??this.gasConstants.collectFees);return{to:s,value:n,body:o}}async sendCollectFees(t,e,s){const o=await this.getCollectFeeTxParams(t,s);return e.send(o)}async createBurnBody(t){return r().storeUint(T.BURN,32).storeUint((t==null?void 0:t.queryId)??0,64).storeCoins(BigInt(t.amount)).storeAddress(d(t.responseAddress)).endCell()}async getBurnTxParams(t,e){const[s,o]=await Promise.all([this.getWalletAddress(t,e.responseAddress),this.createBurnBody({amount:e.amount,responseAddress:e.responseAddress,queryId:e.queryId})]),n=BigInt(e.gasAmount??this.gasConstants.burn);return{to:s,value:n,body:o}}async sendBurn(t,e,s){const o=await this.getBurnTxParams(t,s);return e.send(o)}async getExpectedOutputs(t,e){const s=await t.get("get_expected_outputs",[{type:"int",value:BigInt(e.amount)},{type:"slice",cell:r().storeAddress(d(e.jettonWallet)).endCell()}]);return{jettonToReceive:s.stack.readBigNumber(),protocolFeePaid:s.stack.readBigNumber(),refFeePaid:s.stack.readBigNumber()}}async getExpectedTokens(t,e){return(await t.get("get_expected_tokens",[{type:"int",value:BigInt(e.amount0)},{type:"int",value:BigInt(e.amount1)}])).stack.readBigNumber()}async getExpectedLiquidity(t,e){const s=await t.get("get_expected_liquidity",[{type:"int",value:BigInt(e.jettonAmount)}]);return{amount0:s.stack.readBigNumber(),amount1:s.stack.readBigNumber()}}async getLpAccountAddress(t,e){return(await t.get("get_lp_account_address",[{type:"slice",cell:r().storeAddress(d(e.ownerAddress)).endCell()}])).stack.readAddress()}async getJettonWallet(t,e){const s=await this.getWalletAddress(t,e.ownerAddress);return X.create(s)}async getPoolData(t){const e=await t.get("get_pool_data",[]);return{reserve0:e.stack.readBigNumber(),reserve1:e.stack.readBigNumber(),token0WalletAddress:e.stack.readAddress(),token1WalletAddress:e.stack.readAddress(),lpFee:e.stack.readBigNumber(),protocolFee:e.stack.readBigNumber(),refFee:e.stack.readBigNumber(),protocolFeeAddress:e.stack.readAddress(),collectedToken0ProtocolFee:e.stack.readBigNumber(),collectedToken1ProtocolFee:e.stack.readBigNumber()}}async getLpAccount(t,e){const s=await this.getLpAccountAddress(t,e);return $.create(s)}};q.version=u.v1;q.gasConstants={collectFees:a("1.1"),burn:a("0.5")};let K=q;const B=class y extends f{constructor(t=y.address,{gasConstants:e,...s}={}){super(t,s),this.gasConstants={...y.gasConstants,...e}}async createSwapBody(t){const e=r();return e.storeUint(T.SWAP,32),e.storeAddress(d(t.askJettonWalletAddress)),e.storeCoins(BigInt(t.minAskAmount)),e.storeAddress(d(t.userWalletAddress)),t.referralAddress?(e.storeUint(1,1),e.storeAddress(d(t.referralAddress))):e.storeUint(0,1),e.endCell()}async getSwapJettonToJettonTxParams(t,e){const[s,o]=await Promise.all([t.open(l.create(e.offerJettonAddress)).getWalletAddress(e.userWalletAddress),t.open(l.create(e.askJettonAddress)).getWalletAddress(this.address)]),n=await this.createSwapBody({userWalletAddress:e.userWalletAddress,minAskAmount:e.minAskAmount,askJettonWalletAddress:o,referralAddress:e.referralAddress}),c=BigInt(e.forwardGasAmount??this.gasConstants.swapJettonToJetton.forwardGasAmount),P=v({queryId:e.queryId??0,amount:e.offerAmount,destination:this.address,responseDestination:e.userWalletAddress,customPayload:e.jettonCustomPayload,forwardTonAmount:c,forwardPayload:n}),w=BigInt(e.gasAmount??this.gasConstants.swapJettonToJetton.gasAmount);return{to:s,value:w,body:P}}async sendSwapJettonToJetton(t,e,s){const o=await this.getSwapJettonToJettonTxParams(t,s);return e.send(o)}async getSwapJettonToTonTxParams(t,e){if(e.proxyTon.version!==y.version)throw new C({expected:y.version,received:e.proxyTon.version});return await this.getSwapJettonToJettonTxParams(t,{...e,askJettonAddress:e.proxyTon.address,gasAmount:e.gasAmount??this.gasConstants.swapJettonToTon.gasAmount,forwardGasAmount:e.forwardGasAmount??this.gasConstants.swapJettonToTon.forwardGasAmount})}async sendSwapJettonToTon(t,e,s){const o=await this.getSwapJettonToTonTxParams(t,s);return e.send(o)}async getSwapTonToJettonTxParams(t,e){if(e.proxyTon.version!==y.version)throw new C({expected:y.version,received:e.proxyTon.version});const s=await t.open(l.create(e.askJettonAddress)).getWalletAddress(this.address),o=await this.createSwapBody({userWalletAddress:e.userWalletAddress,minAskAmount:e.minAskAmount,askJettonWalletAddress:s,referralAddress:e.referralAddress}),n=BigInt(e.forwardGasAmount??this.gasConstants.swapTonToJetton.forwardGasAmount);return await t.open(e.proxyTon).getTonTransferTxParams({queryId:e.queryId??0,tonAmount:e.offerAmount,destinationAddress:this.address,refundAddress:e.userWalletAddress,forwardPayload:o,forwardTonAmount:n})}async sendSwapTonToJetton(t,e,s){const o=await this.getSwapTonToJettonTxParams(t,s);return e.send(o)}async createProvideLiquidityBody(t){return r().storeUint(T.PROVIDE_LP,32).storeAddress(d(t.routerWalletAddress)).storeCoins(BigInt(t.minLpOut)).endCell()}async getProvideLiquidityJettonTxParams(t,e){const[s,o]=await Promise.all([t.open(l.create(e.sendTokenAddress)).getWalletAddress(e.userWalletAddress),t.open(l.create(e.otherTokenAddress)).getWalletAddress(this.address)]),n=await this.createProvideLiquidityBody({routerWalletAddress:o,minLpOut:e.minLpOut}),c=BigInt(e.forwardGasAmount??this.gasConstants.provideLpJetton.forwardGasAmount),P=v({queryId:e.queryId??0,amount:e.sendAmount,destination:this.address,responseDestination:e.userWalletAddress,customPayload:e.jettonCustomPayload,forwardTonAmount:c,forwardPayload:n}),w=BigInt(e.gasAmount??this.gasConstants.provideLpJetton.gasAmount);return{to:s,value:w,body:P}}async sendProvideLiquidityJetton(t,e,s){const o=await this.getProvideLiquidityJettonTxParams(t,s);return e.send(o)}async getProvideLiquidityTonTxParams(t,e){if(e.proxyTon.version!==y.version)throw new C({expected:y.version,received:e.proxyTon.version});const s=await t.open(l.create(e.otherTokenAddress)).getWalletAddress(this.address),o=await this.createProvideLiquidityBody({routerWalletAddress:s,minLpOut:e.minLpOut}),n=BigInt(e.forwardGasAmount??this.gasConstants.provideLpTon.forwardGasAmount);return await t.open(e.proxyTon).getTonTransferTxParams({queryId:e.queryId??0,tonAmount:e.sendAmount,destinationAddress:this.address,refundAddress:e.userWalletAddress,forwardPayload:o,forwardTonAmount:n})}async sendProvideLiquidityTon(t,e,s){const o=await this.getProvideLiquidityTonTxParams(t,s);return e.send(o)}async getPoolAddress(t,e){return(await t.get("get_pool_address",[{type:"slice",cell:r().storeAddress(d(e.token0)).endCell()},{type:"slice",cell:r().storeAddress(d(e.token1)).endCell()}])).stack.readAddress()}async getPoolAddressByJettonMinters(t,e){const[s,o]=await Promise.all([t.open(l.create(e.token0)).getWalletAddress(this.address),t.open(l.create(e.token1)).getWalletAddress(this.address)]);return await this.getPoolAddress(t,{token0:s,token1:o})}async getPool(t,e){const s=await this.getPoolAddressByJettonMinters(t,{token0:e.token0,token1:e.token1});return K.create(s)}async getRouterData(t){const e=await t.get("get_router_data",[]);return{isLocked:e.stack.readBoolean(),adminAddress:e.stack.readAddress(),tempUpgrade:e.stack.readCell(),poolCode:e.stack.readCell(),jettonLpWalletCode:e.stack.readCell(),lpAccountCode:e.stack.readCell()}}};B.version=u.v1;B.address=W(Y);B.gasConstants={swapJettonToJetton:{gasAmount:a("0.22"),forwardGasAmount:a("0.175")},swapJettonToTon:{gasAmount:a("0.17"),forwardGasAmount:a("0.125")},swapTonToJetton:{forwardGasAmount:a("0.185")},provideLpJetton:{gasAmount:a("0.3"),forwardGasAmount:a("0.24")},provideLpTon:{forwardGasAmount:a("0.26")}};let ce=B;const h={v1:"v1",v2_1:"v2_1"},Ae={DEPLOY_WALLET:1824798067},I=class x extends l{constructor(t=x.address,{gasConstants:e,...s}={}){super(t,s),this.version=x.version,this.gasConstants={...x.gasConstants,...e}}async getTonTransferTxParams(t,e){const s=await this.getWalletAddress(t,e.destinationAddress),o=v({queryId:e.queryId??0,amount:e.tonAmount,destination:e.destinationAddress,forwardTonAmount:BigInt(e.forwardTonAmount??0),forwardPayload:e.forwardPayload}),n=BigInt(e.tonAmount)+BigInt(e.forwardTonAmount??0);return{to:s,value:n,body:o}}async sendTonTransfer(t,e,s){const o=await this.getTonTransferTxParams(t,s);return e.send(o)}async createDeployWalletBody(t){return r().storeUint(Ae.DEPLOY_WALLET,32).storeUint(t.queryId??0,64).storeAddress(d(t.ownerAddress)).endCell()}async getDeployWalletTxParams(t,e){const s=this.address,o=await this.createDeployWalletBody({ownerAddress:e.ownerAddress,queryId:e==null?void 0:e.queryId}),n=BigInt((e==null?void 0:e.gasAmount)??this.gasConstants.deployWallet);return{to:s,value:n,body:o}}async sendDeployWallet(t,e,s){const o=await this.getDeployWalletTxParams(t,s);return e.send(o)}};I.version=h.v1;I.address=W("EQCM3B12QK1e4yZSf8GtBRT0aLMNyEsBc_DhVfRRtOEffLez");I.gasConstants={deployWallet:a("1.05")};let D=I;const ye={Router:ce,Pool:K,LpAccount:$,pTON:D},O={TON_TRANSFER:32736093,DEPLOY_WALLET:1331643155},J=class L extends D{constructor(t,{gasConstants:e,...s}={}){super(t,s),this.version=L.version,this.gasConstants={...L.gasConstants,...e}}async createTonTransferBody(t){const e=r();return e.storeUint(O.TON_TRANSFER,32),e.storeUint(t.queryId??0,64),e.storeCoins(BigInt(t.tonAmount)),e.storeAddress(d(t.refundAddress)),t.forwardPayload&&(e.storeBit(!0),e.storeRef(t.forwardPayload)),e.endCell()}async getTonTransferTxParams(t,e){const s=await this.getWalletAddress(t,e.destinationAddress),o=await this.createTonTransferBody({tonAmount:e.tonAmount,refundAddress:e.refundAddress,forwardPayload:e.forwardPayload,queryId:e.queryId}),n=BigInt(e.tonAmount)+BigInt(e.forwardTonAmount??0)+BigInt(this.gasConstants.tonTransfer);return{to:s,value:n,body:o}}async sendTonTransfer(t,e,s){const o=await this.getTonTransferTxParams(t,s);return e.send(o)}async createDeployWalletBody(t){return r().storeUint(O.DEPLOY_WALLET,32).storeUint(t.queryId??0,64).storeAddress(d(t.ownerAddress)).storeAddress(d(t.excessAddress)).endCell()}async getDeployWalletTxParams(t,e){const s=this.address,o=await this.createDeployWalletBody({ownerAddress:e.ownerAddress,excessAddress:e.excessAddress,queryId:e==null?void 0:e.queryId}),n=BigInt((e==null?void 0:e.gasAmount)??this.gasConstants.deployWallet);return{to:s,value:n,body:o}}async sendDeployWallet(t,e,s){const o=await this.getDeployWalletTxParams(t,s);return e.send(o)}};J.version=h.v2_1;J.gasConstants={tonTransfer:a("0.01"),deployWallet:a("0.1")};let R=J;const g={SWAP:1717886506,CROSS_SWAP:1775180379,PROVIDE_LP:935368415,DIRECT_ADD_LIQUIDITY:267960262,REFUND_ME:321624620,RESET_GAS:701638965,COLLECT_FEES:518295838,BURN:1499400124,WITHDRAW_FEE:894160372},ge=15*60,G=class Z extends f{constructor(t,{gasConstants:e,...s}={}){super(t,s),this.gasConstants={...Z.gasConstants,...e}}async createRefundBody(t){return r().storeUint(g.REFUND_ME,32).storeUint((t==null?void 0:t.queryId)??0,64).storeMaybeRef(t==null?void 0:t.leftMaybePayload).storeMaybeRef(t==null?void 0:t.rightMaybePayload).endCell()}async getRefundTxParams(t,e){const s=this.address,o=await this.createRefundBody({leftMaybePayload:e==null?void 0:e.leftMaybePayload,rightMaybePayload:e==null?void 0:e.rightMaybePayload,queryId:e==null?void 0:e.queryId}),n=BigInt((e==null?void 0:e.gasAmount)??this.gasConstants.refund);return{to:s,value:n,body:o}}async sendRefund(t,e,s){const o=await this.getRefundTxParams(t,s);return e.send(o)}async createDirectAddLiquidityBody(t){return r().storeUint(g.DIRECT_ADD_LIQUIDITY,32).storeUint((t==null?void 0:t.queryId)??0,64).storeCoins(BigInt(t.amount0)).storeCoins(BigInt(t.amount1)).storeCoins(BigInt(t.minimumLpToMint??1)).storeCoins(BigInt(t.dexCustomPayloadForwardGasAmount??0)).storeAddress(d(t.userWalletAddress)).storeMaybeRef(t.dexCustomPayload).storeRef(r().storeAddress(d(t.refundAddress??t.userWalletAddress)).storeAddress(d(t.excessesAddress??t.refundAddress??t.userWalletAddress)).endCell()).endCell()}async getDirectAddLiquidityTxParams(t,e){const s=this.address,o=await this.createDirectAddLiquidityBody({amount0:e.amount0,amount1:e.amount1,minimumLpToMint:e.minimumLpToMint,userWalletAddress:e.userWalletAddress,refundAddress:e.refundAddress,excessesAddress:e.excessesAddress,dexCustomPayload:e.dexCustomPayload,dexCustomPayloadForwardGasAmount:e.dexCustomPayloadForwardGasAmount,queryId:e.queryId}),n=BigInt(e.gasAmount??this.gasConstants.directAddLp);return{to:s,value:n,body:o}}async sendDirectAddLiquidity(t,e,s){const o=await this.getDirectAddLiquidityTxParams(t,s);return e.send(o)}async createResetGasBody(t){return r().storeUint(g.RESET_GAS,32).storeUint((t==null?void 0:t.queryId)??0,64).endCell()}async getResetGasTxParams(t,e){const s=this.address,o=await this.createResetGasBody({queryId:e==null?void 0:e.queryId}),n=BigInt((e==null?void 0:e.gasAmount)??this.gasConstants.resetGas);return{to:s,value:n,body:o}}async sendResetGas(t,e,s){const o=await this.getResetGasTxParams(t,s);return e.send(o)}async getLpAccountData(t){const e=await t.get("get_lp_account_data",[]);return{userAddress:e.stack.readAddress(),poolAddress:e.stack.readAddress(),amount0:e.stack.readBigNumber(),amount1:e.stack.readBigNumber()}}};G.version=u.v2_1;G.gasConstants={refund:a("0.8"),directAddLp:a("0.3"),resetGas:a("0.02")};let b=G;const S=class z extends l{constructor(t,{gasConstants:e,...s}={}){super(t,s),this.gasConstants={...z.gasConstants,...e}}async createCollectFeesBody(t){return r().storeUint(g.COLLECT_FEES,32).storeUint((t==null?void 0:t.queryId)??0,64).endCell()}async getCollectFeeTxParams(t,e){const s=this.address,o=await this.createCollectFeesBody({queryId:e==null?void 0:e.queryId}),n=BigInt((e==null?void 0:e.gasAmount)??this.gasConstants.collectFees);return{to:s,value:n,body:o}}async sendCollectFees(t,e,s){const o=await this.getCollectFeeTxParams(t,s);return e.send(o)}async createBurnBody(t){return r().storeUint(g.BURN,32).storeUint((t==null?void 0:t.queryId)??0,64).storeCoins(BigInt(t.amount)).storeAddress(null).storeMaybeRef(t.dexCustomPayload).endCell()}async getBurnTxParams(t,e){const[s,o]=await Promise.all([this.getWalletAddress(t,e.userWalletAddress),this.createBurnBody({amount:e.amount,dexCustomPayload:e.dexCustomPayload,queryId:e.queryId})]),n=BigInt(e.gasAmount??this.gasConstants.burn);return{to:s,value:n,body:o}}async sendBurn(t,e,s){const o=await this.getBurnTxParams(t,s);return e.send(o)}async getPoolType(t){return(await t.get("get_pool_type",[])).stack.readString()}async getLpAccountAddress(t,e){return(await t.get("get_lp_account_address",[{type:"slice",cell:r().storeAddress(d(e.ownerAddress)).endCell()}])).stack.readAddress()}async getLpAccount(t,e){const s=await this.getLpAccountAddress(t,e);return b.create(s)}async getJettonWallet(t,e){const s=await this.getWalletAddress(t,e.ownerAddress);return X.create(s)}async getPoolData(t){return(await this.implGetPoolData(t)).commonPoolData}async implGetPoolData(t){const e=await t.get("get_pool_data",[]);return{commonPoolData:{isLocked:e.stack.readBoolean(),routerAddress:e.stack.readAddress(),totalSupplyLP:e.stack.readBigNumber(),reserve0:e.stack.readBigNumber(),reserve1:e.stack.readBigNumber(),token0WalletAddress:e.stack.readAddress(),token1WalletAddress:e.stack.readAddress(),lpFee:e.stack.readBigNumber(),protocolFee:e.stack.readBigNumber(),protocolFeeAddress:e.stack.readAddressOpt(),collectedToken0ProtocolFee:e.stack.readBigNumber(),collectedToken1ProtocolFee:e.stack.readBigNumber()},stack:e.stack}}};S.version=u.v2_1;S.gasConstants={collectFees:a("0.4"),burn:a("0.8")};let A=S;const E=class p extends f{constructor(t,{gasConstants:e,...s}={}){super(t,s),this.gasConstants={...p.gasConstants,...e}}async createWithdrawFeeBody(t){return r().storeUint(g.WITHDRAW_FEE,32).storeUint((t==null?void 0:t.queryId)??0,64).endCell()}async getWithdrawFeeTxParams(t,e){const s=this.address,o=await this.createWithdrawFeeBody({queryId:e==null?void 0:e.queryId}),n=BigInt((e==null?void 0:e.gasAmount)??this.gasConstants.withdrawFee);return{to:s,body:o,value:n}}async sendWithdrawFee(t,e,s){const o=await this.getWithdrawFeeTxParams(t,s);return e.send(o)}async getVaultData(t){const e=await t.get("get_vault_data",[]);return{ownerAddress:e.stack.readAddress(),tokenAddress:e.stack.readAddress(),routerAddress:e.stack.readAddress(),depositedAmount:e.stack.readBigNumber()}}};E.version=u.v2_1;E.gasConstants={withdrawFee:a("0.3")};let V=E;const F=class ee extends f{constructor(t,{gasConstants:e,txDeadline:s,...o}={}){if(super(t,o),this.address.equals(M.parse(Y)))throw Error(["You are trying to create an instance v2.1 Router with a v1 address","Please use the appropriate class for the v1 Router. Otherwise, all the funds will be permanently lost."].join(`
`));this.gasConstants={...ee.gasConstants,...e},this.txDeadline=s??ge}async createSwapBody(t){if(t.referralValue&&(BigInt(t.referralValue)<0||BigInt(t.referralValue)>100))throw Error("'referralValue' should be in range [0, 100] BPS");return r().storeUint(g.SWAP,32).storeAddress(d(t.askJettonWalletAddress)).storeAddress(d(t.refundAddress)).storeAddress(d(t.excessesAddress??t.refundAddress)).storeUint(t.deadline??this.defaultDeadline,64).storeRef(r().storeCoins(BigInt(t.minAskAmount)).storeAddress(d(t.receiverAddress)).storeCoins(BigInt(t.dexCustomPayloadForwardGasAmount??0)).storeMaybeRef(t.dexCustomPayload).storeCoins(BigInt(t.refundForwardGasAmount??0)).storeMaybeRef(t.refundPayload).storeUint(BigInt(t.referralValue??10),16).storeAddress(t.referralAddress?d(t.referralAddress):null).endCell()).endCell()}async createCrossSwapBody(t){if(t.referralValue&&(BigInt(t.referralValue)<0||BigInt(t.referralValue)>100))throw Error("'referralValue' should be in range [0, 100] BPS");return r().storeUint(g.CROSS_SWAP,32).storeAddress(d(t.askJettonWalletAddress)).storeAddress(d(t.refundAddress)).storeAddress(d(t.excessesAddress??t.refundAddress)).storeUint(t.deadline??this.defaultDeadline,64).storeRef(r().storeCoins(BigInt(t.minAskAmount)).storeAddress(d(t.receiverAddress)).storeCoins(BigInt(t.dexCustomPayloadForwardGasAmount??0)).storeMaybeRef(t.dexCustomPayload).storeCoins(BigInt(t.refundForwardGasAmount??0)).storeMaybeRef(t.refundPayload).storeUint(BigInt(t.referralValue??10),16).storeAddress(t.referralAddress?d(t.referralAddress):null).endCell()).endCell()}async getSwapJettonToJettonTxParams(t,e){const s=this.address,[o,n]=await Promise.all([t.open(l.create(e.offerJettonAddress)).getWalletAddress(e.userWalletAddress),t.open(l.create(e.askJettonAddress)).getWalletAddress(s)]),c=BigInt(e.forwardGasAmount??this.gasConstants.swapJettonToJetton.forwardGasAmount),P=await this.createSwapBody({askJettonWalletAddress:n,receiverAddress:e.userWalletAddress,minAskAmount:e.minAskAmount,refundAddress:e.refundAddress??e.userWalletAddress,excessesAddress:e.excessesAddress,referralAddress:e.referralAddress,referralValue:e.referralValue,dexCustomPayload:e.dexCustomPayload,dexCustomPayloadForwardGasAmount:e.dexCustomPayloadForwardGasAmount,refundPayload:e.refundPayload,refundForwardGasAmount:e.refundForwardGasAmount,deadline:e.deadline}),w=v({queryId:e.queryId??0,amount:e.offerAmount,destination:s,responseDestination:e.userWalletAddress,customPayload:e.jettonCustomPayload,forwardTonAmount:c,forwardPayload:P}),_=BigInt(e.gasAmount??this.gasConstants.swapJettonToJetton.gasAmount);return{to:o,value:_,body:w}}async sendSwapJettonToJetton(t,e,s){const o=await this.getSwapJettonToJettonTxParams(t,s);return e.send(o)}async getSwapJettonToTonTxParams(t,e){if(e.proxyTon.version!==A.version)throw new C({expected:A.version,received:e.proxyTon.version});return await this.getSwapJettonToJettonTxParams(t,{...e,askJettonAddress:e.proxyTon.address,gasAmount:e.gasAmount??this.gasConstants.swapJettonToTon.gasAmount,forwardGasAmount:e.forwardGasAmount??this.gasConstants.swapJettonToTon.forwardGasAmount})}async sendSwapJettonToTon(t,e,s){const o=await this.getSwapJettonToTonTxParams(t,s);return e.send(o)}async getSwapTonToJettonTxParams(t,e){if(e.proxyTon.version!==A.version)throw new C({expected:A.version,received:e.proxyTon.version});const s=this.address,o=await t.open(l.create(e.askJettonAddress)).getWalletAddress(s),n=await this.createSwapBody({askJettonWalletAddress:o,receiverAddress:e.userWalletAddress,minAskAmount:e.minAskAmount,refundAddress:e.refundAddress??e.userWalletAddress,excessesAddress:e.excessesAddress,referralAddress:e.referralAddress,referralValue:e.referralValue,dexCustomPayload:e.dexCustomPayload,dexCustomPayloadForwardGasAmount:e.dexCustomPayloadForwardGasAmount,refundPayload:e.refundPayload,refundForwardGasAmount:e.refundForwardGasAmount,deadline:e.deadline}),c=BigInt(e.forwardGasAmount??this.gasConstants.swapTonToJetton.forwardGasAmount);return await t.open(e.proxyTon).getTonTransferTxParams({queryId:e.queryId??0,tonAmount:e.offerAmount,destinationAddress:s,refundAddress:e.userWalletAddress,forwardPayload:n,forwardTonAmount:c})}async sendSwapTonToJetton(t,e,s){const o=await this.getSwapTonToJettonTxParams(t,s);return e.send(o)}async createProvideLiquidityBody(t){return r().storeUint(g.PROVIDE_LP,32).storeAddress(d(t.routerWalletAddress)).storeAddress(d(t.refundAddress)).storeAddress(d(t.excessesAddress??t.refundAddress)).storeUint(t.deadline??this.defaultDeadline,64).storeRef(r().storeCoins(BigInt(t.minLpOut)).storeAddress(d(t.receiverAddress)).storeUint(t.bothPositive?1:0,1).storeCoins(BigInt(t.dexCustomPayloadForwardGasAmount??0)).storeMaybeRef(t.dexCustomPayload).endCell()).endCell()}async getProvideLiquidityJettonTxParams(t,e){return this.implGetProvideLiquidityJettonTxParams(t,{...e,gasAmount:e.gasAmount??this.gasConstants.provideLpJetton.gasAmount,forwardGasAmount:e.forwardGasAmount??this.gasConstants.provideLpJetton.forwardGasAmount,bothPositive:!0})}async sendProvideLiquidityJetton(t,e,s){const o=await this.getProvideLiquidityJettonTxParams(t,s);return e.send(o)}async getSingleSideProvideLiquidityJettonTxParams(t,e){return this.implGetProvideLiquidityJettonTxParams(t,{...e,gasAmount:e.gasAmount??this.gasConstants.singleSideProvideLpJetton.gasAmount,forwardGasAmount:e.forwardGasAmount??this.gasConstants.singleSideProvideLpJetton.forwardGasAmount,bothPositive:!1})}async sendSingleSideProvideLiquidityJetton(t,e,s){const o=await this.getSingleSideProvideLiquidityJettonTxParams(t,s);return e.send(o)}async implGetProvideLiquidityJettonTxParams(t,e){const s=this.address,[o,n]=await Promise.all([t.open(l.create(e.sendTokenAddress)).getWalletAddress(e.userWalletAddress),t.open(l.create(e.otherTokenAddress)).getWalletAddress(s)]),c=await this.createProvideLiquidityBody({routerWalletAddress:n,receiverAddress:e.userWalletAddress,minLpOut:e.minLpOut,refundAddress:e.refundAddress??e.userWalletAddress,excessesAddress:e.excessesAddress,dexCustomPayload:e.dexCustomPayload,dexCustomPayloadForwardGasAmount:e.dexCustomPayloadForwardGasAmount,bothPositive:e.bothPositive,deadline:e.deadline}),P=BigInt(e.forwardGasAmount),w=v({queryId:e.queryId??0,amount:e.sendAmount,destination:s,responseDestination:e.userWalletAddress,customPayload:e.jettonCustomPayload,forwardTonAmount:P,forwardPayload:c}),_=BigInt(e.gasAmount);return{to:o,value:_,body:w}}async getProvideLiquidityTonTxParams(t,e){return this.implGetProvideLiquidityTonTxParams(t,{...e,forwardGasAmount:e.forwardGasAmount??this.gasConstants.provideLpTon.forwardGasAmount,bothPositive:!0})}async sendProvideLiquidityTon(t,e,s){const o=await this.getProvideLiquidityTonTxParams(t,s);return e.send(o)}async getSingleSideProvideLiquidityTonTxParams(t,e){return this.implGetProvideLiquidityTonTxParams(t,{...e,forwardGasAmount:e.forwardGasAmount??this.gasConstants.singleSideProvideLpTon.forwardGasAmount,bothPositive:!1})}async sendSingleSideProvideLiquidityTon(t,e,s){const o=await this.getSingleSideProvideLiquidityTonTxParams(t,s);return e.send(o)}async implGetProvideLiquidityTonTxParams(t,e){if(e.proxyTon.version!==A.version)throw new C({expected:A.version,received:e.proxyTon.version});const s=this.address,o=await t.open(l.create(e.otherTokenAddress)).getWalletAddress(s),n=await this.createProvideLiquidityBody({routerWalletAddress:o,receiverAddress:e.userWalletAddress,minLpOut:e.minLpOut,refundAddress:e.refundAddress??e.userWalletAddress,excessesAddress:e.excessesAddress,dexCustomPayload:e.dexCustomPayload,dexCustomPayloadForwardGasAmount:e.dexCustomPayloadForwardGasAmount,bothPositive:e.bothPositive,deadline:e.deadline}),c=BigInt(e.forwardGasAmount);return await t.open(e.proxyTon).getTonTransferTxParams({queryId:e.queryId??0,tonAmount:e.sendAmount,destinationAddress:s,refundAddress:e.userWalletAddress,forwardPayload:n,forwardTonAmount:c})}get defaultDeadline(){return Math.floor(Date.now()/1e3)+this.txDeadline}async getPoolAddress(t,e){return(await t.get("get_pool_address",[{type:"slice",cell:r().storeAddress(d(e.token0)).endCell()},{type:"slice",cell:r().storeAddress(d(e.token1)).endCell()}])).stack.readAddress()}async getPoolAddressByJettonMinters(t,e){const[s,o]=await Promise.all([t.open(l.create(e.token0)).getWalletAddress(this.address),t.open(l.create(e.token1)).getWalletAddress(this.address)]);return await this.getPoolAddress(t,{token0:s,token1:o})}async getPool(t,e){const s=await this.getPoolAddressByJettonMinters(t,e);return A.create(s)}async getVaultAddress(t,e){return(await t.get("get_vault_address",[{type:"slice",cell:r().storeAddress(d(e.user)).endCell()},{type:"slice",cell:r().storeAddress(d(e.tokenWallet)).endCell()}])).stack.readAddress()}async getVault(t,e){const s=t.open(l.create(e.tokenMinter)),o=await this.getVaultAddress(t,{user:e.user,tokenWallet:await s.getWalletAddress(this.address)});return V.create(o)}async getRouterVersion(t){const e=await t.get("get_router_version",[]);return{major:e.stack.readNumber(),minor:e.stack.readNumber(),development:e.stack.readString()}}async getRouterData(t){const e=await t.get("get_router_data",[]);return{routerId:e.stack.readNumber(),dexType:e.stack.readString(),isLocked:e.stack.readBoolean(),adminAddress:e.stack.readAddress(),tempUpgrade:e.stack.readCell(),poolCode:e.stack.readCell(),jettonLpWalletCode:e.stack.readCell(),lpAccountCode:e.stack.readCell(),vaultCode:e.stack.readCell()}}};F.version=u.v2_1;F.gasConstants={swapJettonToJetton:{gasAmount:a("0.3"),forwardGasAmount:a("0.24")},swapJettonToTon:{gasAmount:a("0.3"),forwardGasAmount:a("0.24")},swapTonToJetton:{forwardGasAmount:a("0.3")},provideLpJetton:{gasAmount:a("0.3"),forwardGasAmount:a("0.235")},provideLpTon:{forwardGasAmount:a("0.3")},singleSideProvideLpJetton:{gasAmount:a("1"),forwardGasAmount:a("0.8")},singleSideProvideLpTon:{forwardGasAmount:a("0.8")}};let U=F;class k extends A{async getPoolData(t){return{...(await this.implGetPoolData(t)).commonPoolData}}}k.dexType=j.CPI;class N extends U{async getPool(t,e){const s=await this.getPoolAddressByJettonMinters(t,e);return k.create(s)}}N.dexType=j.CPI;class te extends U{}te.CPI=N;class se extends A{}se.CPI=k;const Pe={Router:te,Pool:se,LpAccount:b,Vault:V,pTON:R};class oe extends U{}oe.version=u.v2_2;class ne extends N{}ne.version=u.v2_2;class de extends oe{}de.CPI=ne;class re extends A{}re.version=u.v2_2;class ae extends k{}ae.version=u.v2_2;class ie extends re{}ie.CPI=ae;class le extends b{}le.version=u.v2_2;class ue extends V{}ue.version=u.v2_2;const we={Router:de,Pool:ie,LpAccount:le,Vault:ue,pTON:R},fe={[u.v1]:ye,[u.v2_1]:Pe,[u.v2_2]:we},Ce={[h.v1]:D,[h.v2_1]:R};export{fe as D,Ce as p};
